name: Master CI

on:
  push:
    branches: [master]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build
        run: ./gradlew build
      - name: Integration tests
        run: ./gradlew integrationTest
      - name: Publish packages
        run: ./gradlew publish -Pgpr.user=${{ github.actor }} -Pgpr.token=${{ secrets.GITHUB_TOKEN }}
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: test-report
          path: build/reports/tests/test

      - name: Print app version
        id: print_app_version
        run: ./gradlew printVersionForCI
      - name: Tag commit
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          # Cf. https://octokit.github.io/rest.js/
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'ci-${{steps.print_app_version.outputs.version}}',
              sha: context.sha,
            })

      # # Trigger a deployment:
      # - name: Print app version
      #   id: print_app_version
      #   run: ./gradlew printVersionForCI
      # - name: create deployment
      #   uses: actions/github-script@0.4.0
      #   with:
      #     # GITHUB_TOKEN can create a deployment, but for some reason it doesn't trigger a deployment event
      #     # for other workflows, so we need to use a personal access token.
      #     github-token: ${{secrets.DEPLOYMENT_TOKEN}}
      #     # Cf. https://octokit.github.io/rest.js/
      #     script: |
      #       github.repos.createDeployment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         ref: context.sha,
      #         required_contexts: [],
      #         environment: 'integration',
      #         payload: {
      #           // We can forward the app version to the deployment workflow.
      #           app_version: '${{steps.print_app_version.outputs.version}}'
      #         }
      #       })



#  test-self-hosted:
#
#    runs-on: self-hosted
#
#    steps:
#      - name: Build
#        run: echo "hello!" > hello.txt